import common.ConstantUtil;
import common.SeqGenerator;
import model.Truck;
import service.TruckService;
import common.BuilderUtil;
import messaging.WorldClient;
import org.apache.ibatis.session.SqlSession;
import common.MyBatisUtil;
import protocol.WorldUps;

import java.util.ArrayList;
import java.util.List;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    public static void main(String[] args) throws InterruptedException {
        String host = "127.0.0.1";
        int port = 12345;
        int maxRetries = 60;
        int retryInterval = 5000; // 等待间隔为 5 秒
        boolean databaseStarted = false;
        System.out.println("Waiting for PostgreSQL database to start...");
        while (maxRetries > 0 && !databaseStarted) {
            try {
                SqlSession sqlSession = MyBatisUtil.getSqlSession();
                sqlSession.close();
                databaseStarted = true;
            } catch (Exception e) {
                System.out.println("PostgreSQL database is not yet ready, retrying in " + retryInterval / 1000 + " seconds...");
                Thread.sleep(retryInterval);
                maxRetries--;
            }
        }
        if (databaseStarted) {
            System.out.println("PostgreSQL database started successfully!");
        } else {
            System.out.println("Failed to connect to PostgreSQL database after several attempts.");
            return;
        }
        // todo: also need an amazon client
        WorldClient worldClient = new WorldClient(host, port);
        worldClient.connect();
        System.out.println("connect to world server successfully!");

        TruckService truckService = new TruckService();
        List<WorldUps.UInitTruck> uInitTruckList = truckService.make100Trucks();
        WorldUps.UConnect uConnect = BuilderUtil.buildUConnect(1, new ArrayList<>());
        worldClient.sendMessage(uConnect);
        WorldUps.UConnected uConnected = worldClient.receiveUConnected();
        System.out.println(uConnected.toString());
        if (!uConnected.getResult().equals(ConstantUtil.CONNECT_SUCCESS)) {
            System.out.println(uConnected.getResult());
            return;
        }

        System.out.println("ups connect to world simulation successfully!");
        //truckService.storeTrucks(uInitTruckList);
        // todo: start thread to do recv and send...
        Truck truck = truckService.findTruckToPickUp(); //should be got in amazon client and call world client
        long seqNum = SeqGenerator.incrementAndGet();
        System.out.println("seq: " + seqNum);
        worldClient.SendUGoPickup(truck.getTruckId(), 1, seqNum);
        System.out.println(worldClient.receiveUResponse());
        worldClient.disconnect();

    }
}
