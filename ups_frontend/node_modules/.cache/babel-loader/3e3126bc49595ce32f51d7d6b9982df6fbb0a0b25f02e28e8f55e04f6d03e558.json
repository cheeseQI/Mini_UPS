{"ast":null,"code":"// import { inject } from 'vue';\n// import {hostname, port} from \"@/socketconfig\";\nimport Socket from \"@/socket\";\nimport { UUserRequest, UQuery\n// UUserResponse,\n} from \"@/ups_user_pb\";\nexport default {\n  data() {\n    return {\n      packageId: '',\n      userId: ''\n    };\n  },\n  // setup() {\n  //   const socket = inject('$socket');\n  //   return { socket };\n  // },\n  methods: {\n    async queryOrder() {\n      console.log(\"query Start!\");\n      console.log(this.packageId);\n      console.log(this.userId);\n      const query = new UQuery();\n      query.setPackageid(this.packageId);\n      query.setPackageid(this.userId);\n      const request = new UUserRequest();\n      request.setQuerycommand(query);\n      console.log(request);\n      const socket = new WebSocket(`ws://vcm-33571.vm.duke.edu:1029`);\n      await socket.connect();\n      console.log(\"Socket connection finish\");\n      this.socket.send(request.serializeBinary());\n      socket.onopen = () => {\n        console.log(\"Socket connection successful!\");\n        // 在这里可以进行后续操作，如发送数据等\n        this.socket.send(request.serializeBinary());\n      };\n      socket.onerror = error => {\n        console.error(\"WebSocket error: \", error);\n        console.log(\"fail\"); // 打印失败信息\n      };\n\n      // const binaryPayload = await this.$socket.onMessage(\"queryOrderResponse\");\n\n      // const response = UUserResponse.deserializeBinary(binaryPayload);\n      // const packageList = response.getQueryResult().getPackageList();\n      //\n      // for (let i = 0; i < packageList.length; i++) {\n      //   console.log(packageList[i]);\n      // }\n      // this.$router.push(\"/\");\n    }\n  }\n};","map":{"version":3,"names":["Socket","UUserRequest","UQuery","data","packageId","userId","methods","queryOrder","console","log","query","setPackageid","request","setQuerycommand","socket","WebSocket","connect","send","serializeBinary","onopen","onerror","error"],"sources":["/Users/bhc/erss-hwk5-sq44-hb147/ups_frontend/src/components/QueryOrder.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Query Order</h1>\n    <form @submit.prevent=\"queryOrder\">\n      <label for=\"packageId\">Package ID:</label>\n      <input v-model=\"packageId\" type=\"text\" id=\"packageId\" name=\"packageId\" />\n      <br />\n      <label for=\"userId\">User ID:</label>\n      <input v-model=\"userId\" type=\"text\" id=\"userId\" name=\"userId\" />\n      <br />\n      <button type=\"submit\">Query Order</button>\n    </form>\n  </div>\n</template>\n\n\n<script>\n// import { inject } from 'vue';\n// import {hostname, port} from \"@/socketconfig\";\nimport Socket from \"@/socket\";\nimport {\n  UUserRequest,\n  UQuery,\n  // UUserResponse,\n} from \"@/ups_user_pb\";\n\nexport default {\n  data() {\n      return {\n          packageId: '',\n          userId: '',\n      };\n  },\n  // setup() {\n  //   const socket = inject('$socket');\n  //   return { socket };\n  // },\n  methods: {\n    async queryOrder() {\n        console.log(\"query Start!\");\n        console.log(this.packageId);\n        console.log(this.userId);\n      const query = new UQuery();\n      query.setPackageid(this.packageId);\n      query.setPackageid(this.userId);\n\n      const request = new UUserRequest();\n      request.setQuerycommand(query);\n      console.log(request);\n      const socket = new WebSocket(`ws://vcm-33571.vm.duke.edu:1029`);\n      await socket.connect();\n\n      console.log(\"Socket connection finish\");\n      this.socket.send(request.serializeBinary());\n      socket.onopen = () => {\n          console.log(\"Socket connection successful!\");\n          // 在这里可以进行后续操作，如发送数据等\n          this.socket.send(request.serializeBinary());\n      }\n      socket.onerror = (error) => {\n          console.error(\"WebSocket error: \", error);\n          console.log(\"fail\"); // 打印失败信息\n      };\n\n      // const binaryPayload = await this.$socket.onMessage(\"queryOrderResponse\");\n      \n      // const response = UUserResponse.deserializeBinary(binaryPayload);\n      // const packageList = response.getQueryResult().getPackageList();\n      //\n      // for (let i = 0; i < packageList.length; i++) {\n      //   console.log(packageList[i]);\n      // }\n      // this.$router.push(\"/\");\n    },\n  },\n};\n</script>\n"],"mappings":"AAiBA;AACA;AACA,OAAOA,MAAK,MAAO,UAAU;AAC7B,SACEC,YAAY,EACZC;AACA;AAAA,OACK,eAAe;AAEtB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,SAAS,EAAE,EAAE;MACbC,MAAM,EAAE;IACZ,CAAC;EACL,CAAC;EACD;EACA;EACA;EACA;EACAC,OAAO,EAAE;IACP,MAAMC,UAAUA,CAAA,EAAG;MACfC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC3BD,OAAO,CAACC,GAAG,CAAC,IAAI,CAACL,SAAS,CAAC;MAC3BI,OAAO,CAACC,GAAG,CAAC,IAAI,CAACJ,MAAM,CAAC;MAC1B,MAAMK,KAAI,GAAI,IAAIR,MAAM,EAAE;MAC1BQ,KAAK,CAACC,YAAY,CAAC,IAAI,CAACP,SAAS,CAAC;MAClCM,KAAK,CAACC,YAAY,CAAC,IAAI,CAACN,MAAM,CAAC;MAE/B,MAAMO,OAAM,GAAI,IAAIX,YAAY,EAAE;MAClCW,OAAO,CAACC,eAAe,CAACH,KAAK,CAAC;MAC9BF,OAAO,CAACC,GAAG,CAACG,OAAO,CAAC;MACpB,MAAME,MAAK,GAAI,IAAIC,SAAS,CAAE,iCAAgC,CAAC;MAC/D,MAAMD,MAAM,CAACE,OAAO,EAAE;MAEtBR,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvC,IAAI,CAACK,MAAM,CAACG,IAAI,CAACL,OAAO,CAACM,eAAe,EAAE,CAAC;MAC3CJ,MAAM,CAACK,MAAK,GAAI,MAAM;QAClBX,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;QAC5C;QACA,IAAI,CAACK,MAAM,CAACG,IAAI,CAACL,OAAO,CAACM,eAAe,EAAE,CAAC;MAC/C;MACAJ,MAAM,CAACM,OAAM,GAAKC,KAAK,IAAK;QACxBb,OAAO,CAACa,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;QACzCb,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC,EAAE;MACzB,CAAC;;MAED;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}