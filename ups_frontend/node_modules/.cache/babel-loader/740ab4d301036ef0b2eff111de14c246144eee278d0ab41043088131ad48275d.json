{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { UUserRequest, UQuery\n// UUserResponse,\n} from \"@/ups_user_pb\";\nimport io from 'socket.io-client';\nexport default {\n  data() {\n    return {\n      socket: null,\n      message: '',\n      receivedMessages: []\n    };\n  },\n  mounted() {\n    // 连接到服务器\n    this.socket = io('ws://localhost:1029');\n\n    // 监听服务器发送的消息\n    this.socket.on('message', data => {\n      this.receivedMessages.push(data);\n    });\n  },\n  methods: {\n    sendMessage() {\n      // 发送消息到服务器\n      this.socket.emit('message', this.message);\n      this.message = '';\n    },\n    async queryOrder() {\n      console.log(\"query\");\n      const query = new UQuery();\n      query.setPackageId(this.packageId);\n      query.setUserId(this.userId);\n      const request = new UUserRequest();\n      request.setQuerycommand(query);\n      console.log(\"write start\");\n      this.client.write(\"hello\".serializeBinary());\n      console.log(\"write finish\");\n      // this.socket.send(\"queryOrder\", request);\n\n      // // const binaryPayload = await this.socket.onMessage(\"queryOrderResponse\");\n      // //\n      // // const response = UUserResponse.deserializeBinary(binaryPayload);\n      // // const packageList = response.getQueryResult().getPackageList();\n      // //\n      // // for (let i = 0; i < packageList.length; i++) {\n      // //   console.log(packageList[i]);\n      // // }\n      // this.$router.push(\"/\");\n    }\n  }\n};\n\n// import { inject } from 'vue';\n\n// export default {\n//   data() {\n//     return {\n//       orderId: \"\",\n//       order: null,\n//       socket: inject('$socket')\n//     };\n//   },\n//   // setup() {\n//   //   const socket = inject('$socket');\n//   //   return { socket };\n//   // },\n//   methods: {\n//     async queryOrder() {\n//       const query = new UQuery();\n//       query.setPackageId(this.packageId);\n//       query.setUserId(this.userId);\n//\n//       const request = new UUserRequest();\n//       request.setQuerycommand(query);\n//\n//       this.socket.send(\"queryOrder\", request);\n//\n//       // // const binaryPayload = await this.socket.onMessage(\"queryOrderResponse\");\n//       // //\n//       // // const response = UUserResponse.deserializeBinary(binaryPayload);\n//       // // const packageList = response.getQueryResult().getPackageList();\n//       // //\n//       // // for (let i = 0; i < packageList.length; i++) {\n//       // //   console.log(packageList[i]);\n//       // // }\n//       // this.$router.push(\"/\");\n//     },\n//   },\n// };","map":{"version":3,"names":["UUserRequest","UQuery","io","data","socket","message","receivedMessages","mounted","on","push","methods","sendMessage","emit","queryOrder","console","log","query","setPackageId","packageId","setUserId","userId","request","setQuerycommand","client","write","serializeBinary"],"sources":["/Users/bhc/erss-hwk5-sq44-hb147/ups_frontend/src/components/QueryOrder.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Query Order</h1>\n    <form @submit.prevent=\"queryOrder\">\n      <label for=\"packageId\">Package ID:</label>\n      <input v-model=\"packageId\" type=\"text\" id=\"packageId\" name=\"packageId\" />\n      <br />\n      <label for=\"userId\">User ID:</label>\n      <input v-model=\"userId\" type=\"text\" id=\"userId\" name=\"userId\" />\n      <br />\n      <button type=\"submit\">Query Order</button>\n    </form>\n  </div>\n</template>\n\n\n<script>\nimport {\n    UUserRequest,\n    UQuery,\n    // UUserResponse,\n} from \"@/ups_user_pb\";\nimport io from 'socket.io-client';\n\nexport default {\n    data() {\n        return {\n            socket: null,\n            message: '',\n            receivedMessages: [],\n        };\n    },\n    mounted() {\n        // 连接到服务器\n        this.socket = io('ws://localhost:1029');\n\n        // 监听服务器发送的消息\n        this.socket.on('message', (data) => {\n            this.receivedMessages.push(data);\n        });\n    },\n    methods: {\n        sendMessage() {\n            // 发送消息到服务器\n            this.socket.emit('message', this.message);\n            this.message = '';\n        },\n        async queryOrder() {\n            console.log(\"query\");\n            const query = new UQuery();\n            query.setPackageId(this.packageId);\n            query.setUserId(this.userId);\n\n            const request = new UUserRequest();\n            request.setQuerycommand(query);\n\n            console.log(\"write start\");\n            this.client.write(\"hello\".serializeBinary());\n            console.log(\"write finish\");\n            // this.socket.send(\"queryOrder\", request);\n\n            // // const binaryPayload = await this.socket.onMessage(\"queryOrderResponse\");\n            // //\n            // // const response = UUserResponse.deserializeBinary(binaryPayload);\n            // // const packageList = response.getQueryResult().getPackageList();\n            // //\n            // // for (let i = 0; i < packageList.length; i++) {\n            // //   console.log(packageList[i]);\n            // // }\n            // this.$router.push(\"/\");\n        },\n    },\n};\n\n// import { inject } from 'vue';\n\n// export default {\n//   data() {\n//     return {\n//       orderId: \"\",\n//       order: null,\n//       socket: inject('$socket')\n//     };\n//   },\n//   // setup() {\n//   //   const socket = inject('$socket');\n//   //   return { socket };\n//   // },\n//   methods: {\n//     async queryOrder() {\n//       const query = new UQuery();\n//       query.setPackageId(this.packageId);\n//       query.setUserId(this.userId);\n//\n//       const request = new UUserRequest();\n//       request.setQuerycommand(query);\n//\n//       this.socket.send(\"queryOrder\", request);\n//\n//       // // const binaryPayload = await this.socket.onMessage(\"queryOrderResponse\");\n//       // //\n//       // // const response = UUserResponse.deserializeBinary(binaryPayload);\n//       // // const packageList = response.getQueryResult().getPackageList();\n//       // //\n//       // // for (let i = 0; i < packageList.length; i++) {\n//       // //   console.log(packageList[i]);\n//       // // }\n//       // this.$router.push(\"/\");\n//     },\n//   },\n// };\n</script>\n"],"mappings":";AAiBA,SACIA,YAAY,EACZC;AACA;AAAA,OACG,eAAe;AACtB,OAAOC,EAAC,MAAO,kBAAkB;AAEjC,eAAe;EACXC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,MAAM,EAAE,IAAI;MACZC,OAAO,EAAE,EAAE;MACXC,gBAAgB,EAAE;IACtB,CAAC;EACL,CAAC;EACDC,OAAOA,CAAA,EAAG;IACN;IACA,IAAI,CAACH,MAAK,GAAIF,EAAE,CAAC,qBAAqB,CAAC;;IAEvC;IACA,IAAI,CAACE,MAAM,CAACI,EAAE,CAAC,SAAS,EAAGL,IAAI,IAAK;MAChC,IAAI,CAACG,gBAAgB,CAACG,IAAI,CAACN,IAAI,CAAC;IACpC,CAAC,CAAC;EACN,CAAC;EACDO,OAAO,EAAE;IACLC,WAAWA,CAAA,EAAG;MACV;MACA,IAAI,CAACP,MAAM,CAACQ,IAAI,CAAC,SAAS,EAAE,IAAI,CAACP,OAAO,CAAC;MACzC,IAAI,CAACA,OAAM,GAAI,EAAE;IACrB,CAAC;IACD,MAAMQ,UAAUA,CAAA,EAAG;MACfC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;MACpB,MAAMC,KAAI,GAAI,IAAIf,MAAM,EAAE;MAC1Be,KAAK,CAACC,YAAY,CAAC,IAAI,CAACC,SAAS,CAAC;MAClCF,KAAK,CAACG,SAAS,CAAC,IAAI,CAACC,MAAM,CAAC;MAE5B,MAAMC,OAAM,GAAI,IAAIrB,YAAY,EAAE;MAClCqB,OAAO,CAACC,eAAe,CAACN,KAAK,CAAC;MAE9BF,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;MAC1B,IAAI,CAACQ,MAAM,CAACC,KAAK,CAAC,OAAO,CAACC,eAAe,EAAE,CAAC;MAC5CX,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC3B;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACJ;EACJ;AACJ,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}