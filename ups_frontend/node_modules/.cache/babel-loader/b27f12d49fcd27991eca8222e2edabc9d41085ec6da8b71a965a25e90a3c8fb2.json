{"ast":null,"code":"// import { inject } from 'vue';\n// import {hostname, port} from \"@/socketconfig\";\n// import Socket from \"@/socket\";\nimport { UUserRequest, UQuery\n// UUserResponse,\n} from \"@/ups_user_pb\";\nexport default {\n  data() {\n    return {\n      packageId: '',\n      userId: ''\n    };\n  },\n  // setup() {\n  //   const socket = inject('$socket');\n  //   return { socket };\n  // },\n  methods: {\n    async queryOrder() {\n      console.log(\"query Start!\");\n      console.log(this.packageId);\n      console.log(this.userId);\n      const query = new UQuery();\n      query.setPackageid(this.packageId);\n      query.setPackageid(this.userId);\n      const request = new UUserRequest();\n      request.setQuerycommand(query);\n      console.log(request);\n      const socket = new WebSocket(`ws://vcm-33571.vm.duke.edu:1029`);\n      socket.onopen = function (event) {\n        console.log('WebSocket connection established.');\n        socket.send('Hello, server!');\n      };\n      socket.onmessage = function (event) {\n        console.log('Received message from server:', event.data);\n      };\n      // socket.addEventListener('open', function (event) {\n      //     console.log('WebSocket connection established.');\n      //     console.log('WebSocket URL:', event.target.url);\n      // });\n      // socket.onopen()\n      // const binaryPayload = await this.$socket.onMessage(\"queryOrderResponse\");\n\n      // const response = UUserResponse.deserializeBinary(binaryPayload);\n      // const packageList = response.getQueryResult().getPackageList();\n      //\n      // for (let i = 0; i < packageList.length; i++) {\n      //   console.log(packageList[i]);\n      // }\n      // this.$router.push(\"/\");\n    }\n  }\n};","map":{"version":3,"names":["UUserRequest","UQuery","data","packageId","userId","methods","queryOrder","console","log","query","setPackageid","request","setQuerycommand","socket","WebSocket","onopen","event","send","onmessage"],"sources":["/Users/bhc/erss-hwk5-sq44-hb147/ups_frontend/src/components/QueryOrder.vue"],"sourcesContent":["/* eslint-disable */\n<template>\n  <div>\n    <h1>Query Order</h1>\n    <form @submit.prevent=\"queryOrder\">\n      <label for=\"packageId\">Package ID:</label>\n      <input v-model=\"packageId\" type=\"text\" id=\"packageId\" name=\"packageId\" />\n      <br />\n      <label for=\"userId\">User ID:</label>\n      <input v-model=\"userId\" type=\"text\" id=\"userId\" name=\"userId\" />\n      <br />\n      <button type=\"submit\">Query Order</button>\n    </form>\n  </div>\n</template>\n\n\n<script>\n// import { inject } from 'vue';\n// import {hostname, port} from \"@/socketconfig\";\n// import Socket from \"@/socket\";\nimport {\n  UUserRequest,\n  UQuery,\n  // UUserResponse,\n} from \"@/ups_user_pb\";\n\nexport default {\n  data() {\n      return {\n          packageId: '',\n          userId: '',\n      };\n  },\n  // setup() {\n  //   const socket = inject('$socket');\n  //   return { socket };\n  // },\n  methods: {\n    async queryOrder() {\n      console.log(\"query Start!\");\n      console.log(this.packageId);\n      console.log(this.userId);\n      const query = new UQuery();\n      query.setPackageid(this.packageId);\n      query.setPackageid(this.userId);\n\n      const request = new UUserRequest();\n      request.setQuerycommand(query);\n      console.log(request);\n      const socket = new WebSocket(`ws://vcm-33571.vm.duke.edu:1029`);\n\n      socket.onopen = function(event) {\n          console.log('WebSocket connection established.');\n          socket.send('Hello, server!');\n      };\n\n      socket.onmessage = function(event) {\n          console.log('Received message from server:', event.data);\n      };\n      // socket.addEventListener('open', function (event) {\n      //     console.log('WebSocket connection established.');\n      //     console.log('WebSocket URL:', event.target.url);\n      // });\n      // socket.onopen()\n      // const binaryPayload = await this.$socket.onMessage(\"queryOrderResponse\");\n      \n      // const response = UUserResponse.deserializeBinary(binaryPayload);\n      // const packageList = response.getQueryResult().getPackageList();\n      //\n      // for (let i = 0; i < packageList.length; i++) {\n      //   console.log(packageList[i]);\n      // }\n      // this.$router.push(\"/\");\n    },\n  },\n};\n</script>\n"],"mappings":"AAkBA;AACA;AACA;AACA,SACEA,YAAY,EACZC;AACA;AAAA,OACK,eAAe;AAEtB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,SAAS,EAAE,EAAE;MACbC,MAAM,EAAE;IACZ,CAAC;EACL,CAAC;EACD;EACA;EACA;EACA;EACAC,OAAO,EAAE;IACP,MAAMC,UAAUA,CAAA,EAAG;MACjBC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC3BD,OAAO,CAACC,GAAG,CAAC,IAAI,CAACL,SAAS,CAAC;MAC3BI,OAAO,CAACC,GAAG,CAAC,IAAI,CAACJ,MAAM,CAAC;MACxB,MAAMK,KAAI,GAAI,IAAIR,MAAM,EAAE;MAC1BQ,KAAK,CAACC,YAAY,CAAC,IAAI,CAACP,SAAS,CAAC;MAClCM,KAAK,CAACC,YAAY,CAAC,IAAI,CAACN,MAAM,CAAC;MAE/B,MAAMO,OAAM,GAAI,IAAIX,YAAY,EAAE;MAClCW,OAAO,CAACC,eAAe,CAACH,KAAK,CAAC;MAC9BF,OAAO,CAACC,GAAG,CAACG,OAAO,CAAC;MACpB,MAAME,MAAK,GAAI,IAAIC,SAAS,CAAE,iCAAgC,CAAC;MAE/DD,MAAM,CAACE,MAAK,GAAI,UAASC,KAAK,EAAE;QAC5BT,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;QAChDK,MAAM,CAACI,IAAI,CAAC,gBAAgB,CAAC;MACjC,CAAC;MAEDJ,MAAM,CAACK,SAAQ,GAAI,UAASF,KAAK,EAAE;QAC/BT,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEQ,KAAK,CAACd,IAAI,CAAC;MAC5D,CAAC;MACD;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}