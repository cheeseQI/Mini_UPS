{"ast":null,"code":"const net = require('net');\nimport { UUserRequest, UQuery\n// UUserResponse,\n} from \"@/ups_user_pb\";\nexport default {\n  data() {\n    console.log(\"data()\");\n    return {\n      client: null,\n      message: ''\n    };\n  },\n  setup() {\n    // 连接Socket服务器\n    console.log(\"setup()\");\n    this.client = new net.Socket();\n    this.client.connect(1029, 'localhost');\n\n    // 监听来自服务器的消息\n    this.client.on('data', data => {\n      console.log('收到消息：', data.toString());\n    });\n  },\n  methods: {\n    // sendMessage() {\n    //     // 向服务器发送消息\n    //     this.client.write(this.message);\n    //     this.message = '';\n    // },\n    async queryOrder() {\n      console.log(\"query\");\n      const query = new UQuery();\n      query.setPackageId(this.packageId);\n      query.setUserId(this.userId);\n      const request = new UUserRequest();\n      request.setQuerycommand(query);\n      console.log(\"write start\");\n      this.client.write(request.serializeBinary());\n      console.log(\"write finish\");\n      // this.socket.send(\"queryOrder\", request);\n\n      // // const binaryPayload = await this.socket.onMessage(\"queryOrderResponse\");\n      // //\n      // // const response = UUserResponse.deserializeBinary(binaryPayload);\n      // // const packageList = response.getQueryResult().getPackageList();\n      // //\n      // // for (let i = 0; i < packageList.length; i++) {\n      // //   console.log(packageList[i]);\n      // // }\n      // this.$router.push(\"/\");\n    }\n  }\n};\n\n// import { inject } from 'vue';\n\n// export default {\n//   data() {\n//     return {\n//       orderId: \"\",\n//       order: null,\n//       socket: inject('$socket')\n//     };\n//   },\n//   // setup() {\n//   //   const socket = inject('$socket');\n//   //   return { socket };\n//   // },\n//   methods: {\n//     async queryOrder() {\n//       const query = new UQuery();\n//       query.setPackageId(this.packageId);\n//       query.setUserId(this.userId);\n//\n//       const request = new UUserRequest();\n//       request.setQuerycommand(query);\n//\n//       this.socket.send(\"queryOrder\", request);\n//\n//       // // const binaryPayload = await this.socket.onMessage(\"queryOrderResponse\");\n//       // //\n//       // // const response = UUserResponse.deserializeBinary(binaryPayload);\n//       // // const packageList = response.getQueryResult().getPackageList();\n//       // //\n//       // // for (let i = 0; i < packageList.length; i++) {\n//       // //   console.log(packageList[i]);\n//       // // }\n//       // this.$router.push(\"/\");\n//     },\n//   },\n// };","map":{"version":3,"names":["net","require","UUserRequest","UQuery","data","console","log","client","message","setup","Socket","connect","on","toString","methods","queryOrder","query","setPackageId","packageId","setUserId","userId","request","setQuerycommand","write","serializeBinary"],"sources":["/Users/bhc/erss-hwk5-sq44-hb147/ups_frontend/src/components/QueryOrder.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Query Order</h1>\n    <form @submit.prevent=\"queryOrder\">\n      <label for=\"packageId\">Package ID:</label>\n      <input v-model=\"packageId\" type=\"text\" id=\"packageId\" name=\"packageId\" />\n      <br />\n      <label for=\"userId\">User ID:</label>\n      <input v-model=\"userId\" type=\"text\" id=\"userId\" name=\"userId\" />\n      <br />\n      <button type=\"submit\">Query Order</button>\n    </form>\n  </div>\n</template>\n\n\n<script>\nconst net = require('net');\n\nimport {\n    UUserRequest,\n    UQuery,\n    // UUserResponse,\n} from \"@/ups_user_pb\";\n\nexport default {\n    data() {\n        console.log(\"data()\");\n        return {\n            client: null,\n            message: ''\n        }\n    },\n    setup() {\n        // 连接Socket服务器\n        console.log(\"setup()\");\n        this.client = new net.Socket();\n        this.client.connect(1029, 'localhost');\n\n        // 监听来自服务器的消息\n        this.client.on('data', (data) => {\n            console.log('收到消息：', data.toString());\n        });\n    },\n    methods: {\n      // sendMessage() {\n      //     // 向服务器发送消息\n      //     this.client.write(this.message);\n      //     this.message = '';\n      // },\n      async queryOrder() {\n          console.log(\"query\");\n        const query = new UQuery();\n        query.setPackageId(this.packageId);\n        query.setUserId(this.userId);\n\n        const request = new UUserRequest();\n        request.setQuerycommand(query);\n\n          console.log(\"write start\");\n        this.client.write(request.serializeBinary());\n          console.log(\"write finish\");\n        // this.socket.send(\"queryOrder\", request);\n\n        // // const binaryPayload = await this.socket.onMessage(\"queryOrderResponse\");\n        // //\n        // // const response = UUserResponse.deserializeBinary(binaryPayload);\n        // // const packageList = response.getQueryResult().getPackageList();\n        // //\n        // // for (let i = 0; i < packageList.length; i++) {\n        // //   console.log(packageList[i]);\n        // // }\n        // this.$router.push(\"/\");\n      },\n  },\n}\n\n// import { inject } from 'vue';\n\n// export default {\n//   data() {\n//     return {\n//       orderId: \"\",\n//       order: null,\n//       socket: inject('$socket')\n//     };\n//   },\n//   // setup() {\n//   //   const socket = inject('$socket');\n//   //   return { socket };\n//   // },\n//   methods: {\n//     async queryOrder() {\n//       const query = new UQuery();\n//       query.setPackageId(this.packageId);\n//       query.setUserId(this.userId);\n//\n//       const request = new UUserRequest();\n//       request.setQuerycommand(query);\n//\n//       this.socket.send(\"queryOrder\", request);\n//\n//       // // const binaryPayload = await this.socket.onMessage(\"queryOrderResponse\");\n//       // //\n//       // // const response = UUserResponse.deserializeBinary(binaryPayload);\n//       // // const packageList = response.getQueryResult().getPackageList();\n//       // //\n//       // // for (let i = 0; i < packageList.length; i++) {\n//       // //   console.log(packageList[i]);\n//       // // }\n//       // this.$router.push(\"/\");\n//     },\n//   },\n// };\n</script>\n"],"mappings":"AAiBA,MAAMA,GAAE,GAAIC,OAAO,CAAC,KAAK,CAAC;AAE1B,SACIC,YAAY,EACZC;AACA;AAAA,OACG,eAAe;AAEtB,eAAe;EACXC,IAAIA,CAAA,EAAG;IACHC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACrB,OAAO;MACHC,MAAM,EAAE,IAAI;MACZC,OAAO,EAAE;IACb;EACJ,CAAC;EACDC,KAAKA,CAAA,EAAG;IACJ;IACAJ,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACtB,IAAI,CAACC,MAAK,GAAI,IAAIP,GAAG,CAACU,MAAM,EAAE;IAC9B,IAAI,CAACH,MAAM,CAACI,OAAO,CAAC,IAAI,EAAE,WAAW,CAAC;;IAEtC;IACA,IAAI,CAACJ,MAAM,CAACK,EAAE,CAAC,MAAM,EAAGR,IAAI,IAAK;MAC7BC,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEF,IAAI,CAACS,QAAQ,EAAE,CAAC;IACzC,CAAC,CAAC;EACN,CAAC;EACDC,OAAO,EAAE;IACP;IACA;IACA;IACA;IACA;IACA,MAAMC,UAAUA,CAAA,EAAG;MACfV,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;MACtB,MAAMU,KAAI,GAAI,IAAIb,MAAM,EAAE;MAC1Ba,KAAK,CAACC,YAAY,CAAC,IAAI,CAACC,SAAS,CAAC;MAClCF,KAAK,CAACG,SAAS,CAAC,IAAI,CAACC,MAAM,CAAC;MAE5B,MAAMC,OAAM,GAAI,IAAInB,YAAY,EAAE;MAClCmB,OAAO,CAACC,eAAe,CAACN,KAAK,CAAC;MAE5BX,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;MAC5B,IAAI,CAACC,MAAM,CAACgB,KAAK,CAACF,OAAO,CAACG,eAAe,EAAE,CAAC;MAC1CnB,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC7B;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACF;EACJ;AACF;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}