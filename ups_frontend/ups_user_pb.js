/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.UPackage', null, global);
goog.exportSymbol('proto.UQuery', null, global);
goog.exportSymbol('proto.UQueryResult', null, global);
goog.exportSymbol('proto.URedirect', null, global);
goog.exportSymbol('proto.URedirectResult', null, global);
goog.exportSymbol('proto.UUserRequest', null, global);
goog.exportSymbol('proto.UUserResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UPackage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UPackage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UPackage.displayName = 'proto.UPackage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UPackage.prototype.toObject = function(opt_includeInstance) {
  return proto.UPackage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UPackage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UPackage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    status: jspb.Message.getField(msg, 2),
    description: jspb.Message.getField(msg, 3),
    itemcount: jspb.Message.getField(msg, 4),
    x: jspb.Message.getField(msg, 5),
    y: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UPackage}
 */
proto.UPackage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UPackage;
  return proto.UPackage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UPackage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UPackage}
 */
proto.UPackage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setItemcount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UPackage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UPackage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UPackage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UPackage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * required int64 id = 1;
 * @return {number}
 */
proto.UPackage.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.UPackage.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.UPackage.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UPackage.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string status = 2;
 * @return {string}
 */
proto.UPackage.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.UPackage.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.UPackage.prototype.clearStatus = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UPackage.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string description = 3;
 * @return {string}
 */
proto.UPackage.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.UPackage.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.UPackage.prototype.clearDescription = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UPackage.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 itemCount = 4;
 * @return {number}
 */
proto.UPackage.prototype.getItemcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.UPackage.prototype.setItemcount = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.UPackage.prototype.clearItemcount = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UPackage.prototype.hasItemcount = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 x = 5;
 * @return {number}
 */
proto.UPackage.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.UPackage.prototype.setX = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.UPackage.prototype.clearX = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UPackage.prototype.hasX = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 y = 6;
 * @return {number}
 */
proto.UPackage.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.UPackage.prototype.setY = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.UPackage.prototype.clearY = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UPackage.prototype.hasY = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UQuery.displayName = 'proto.UQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.UQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    packageid: jspb.Message.getField(msg, 1),
    userid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UQuery}
 */
proto.UQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UQuery;
  return proto.UQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UQuery}
 */
proto.UQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPackageid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int64 packageId = 1;
 * @return {number}
 */
proto.UQuery.prototype.getPackageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.UQuery.prototype.setPackageid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.UQuery.prototype.clearPackageid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UQuery.prototype.hasPackageid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 userId = 2;
 * @return {number}
 */
proto.UQuery.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.UQuery.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.UQuery.prototype.clearUserid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UQuery.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UQueryResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.UQueryResult.repeatedFields_, null);
};
goog.inherits(proto.UQueryResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UQueryResult.displayName = 'proto.UQueryResult';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.UQueryResult.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UQueryResult.prototype.toObject = function(opt_includeInstance) {
  return proto.UQueryResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UQueryResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UQueryResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    packageList: jspb.Message.toObjectList(msg.getPackageList(),
    proto.UPackage.toObject, includeInstance),
    ack: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UQueryResult}
 */
proto.UQueryResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UQueryResult;
  return proto.UQueryResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UQueryResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UQueryResult}
 */
proto.UQueryResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.UPackage;
      reader.readMessage(value,proto.UPackage.deserializeBinaryFromReader);
      msg.addPackage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UQueryResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UQueryResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UQueryResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UQueryResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPackageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.UPackage.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated UPackage package = 1;
 * @return {!Array<!proto.UPackage>}
 */
proto.UQueryResult.prototype.getPackageList = function() {
  return /** @type{!Array<!proto.UPackage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.UPackage, 1));
};


/** @param {!Array<!proto.UPackage>} value */
proto.UQueryResult.prototype.setPackageList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.UPackage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.UPackage}
 */
proto.UQueryResult.prototype.addPackage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.UPackage, opt_index);
};


proto.UQueryResult.prototype.clearPackageList = function() {
  this.setPackageList([]);
};


/**
 * required int32 ack = 2;
 * @return {number}
 */
proto.UQueryResult.prototype.getAck = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.UQueryResult.prototype.setAck = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.UQueryResult.prototype.clearAck = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UQueryResult.prototype.hasAck = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.URedirect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.URedirect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.URedirect.displayName = 'proto.URedirect';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.URedirect.prototype.toObject = function(opt_includeInstance) {
  return proto.URedirect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.URedirect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.URedirect.toObject = function(includeInstance, msg) {
  var f, obj = {
    packageid: jspb.Message.getField(msg, 1),
    x: jspb.Message.getField(msg, 2),
    y: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.URedirect}
 */
proto.URedirect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.URedirect;
  return proto.URedirect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.URedirect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.URedirect}
 */
proto.URedirect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPackageid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.URedirect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.URedirect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.URedirect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.URedirect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required int64 packageId = 1;
 * @return {number}
 */
proto.URedirect.prototype.getPackageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.URedirect.prototype.setPackageid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.URedirect.prototype.clearPackageid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.URedirect.prototype.hasPackageid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 x = 2;
 * @return {number}
 */
proto.URedirect.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.URedirect.prototype.setX = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.URedirect.prototype.clearX = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.URedirect.prototype.hasX = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 y = 3;
 * @return {number}
 */
proto.URedirect.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.URedirect.prototype.setY = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.URedirect.prototype.clearY = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.URedirect.prototype.hasY = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.URedirectResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.URedirectResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.URedirectResult.displayName = 'proto.URedirectResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.URedirectResult.prototype.toObject = function(opt_includeInstance) {
  return proto.URedirectResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.URedirectResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.URedirectResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.URedirectResult}
 */
proto.URedirectResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.URedirectResult;
  return proto.URedirectResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.URedirectResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.URedirectResult}
 */
proto.URedirectResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.URedirectResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.URedirectResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.URedirectResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.URedirectResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string message = 1;
 * @return {string}
 */
proto.URedirectResult.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.URedirectResult.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.URedirectResult.prototype.clearMessage = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.URedirectResult.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UUserRequest.displayName = 'proto.UUserRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.UUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    querycommand: (f = msg.getQuerycommand()) && proto.UQuery.toObject(includeInstance, f),
    redirectcommand: (f = msg.getRedirectcommand()) && proto.URedirect.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UUserRequest}
 */
proto.UUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UUserRequest;
  return proto.UUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UUserRequest}
 */
proto.UUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.UQuery;
      reader.readMessage(value,proto.UQuery.deserializeBinaryFromReader);
      msg.setQuerycommand(value);
      break;
    case 2:
      var value = new proto.URedirect;
      reader.readMessage(value,proto.URedirect.deserializeBinaryFromReader);
      msg.setRedirectcommand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuerycommand();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.UQuery.serializeBinaryToWriter
    );
  }
  f = message.getRedirectcommand();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.URedirect.serializeBinaryToWriter
    );
  }
};


/**
 * optional UQuery queryCommand = 1;
 * @return {?proto.UQuery}
 */
proto.UUserRequest.prototype.getQuerycommand = function() {
  return /** @type{?proto.UQuery} */ (
    jspb.Message.getWrapperField(this, proto.UQuery, 1));
};


/** @param {?proto.UQuery|undefined} value */
proto.UUserRequest.prototype.setQuerycommand = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UUserRequest.prototype.clearQuerycommand = function() {
  this.setQuerycommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UUserRequest.prototype.hasQuerycommand = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional URedirect redirectCommand = 2;
 * @return {?proto.URedirect}
 */
proto.UUserRequest.prototype.getRedirectcommand = function() {
  return /** @type{?proto.URedirect} */ (
    jspb.Message.getWrapperField(this, proto.URedirect, 2));
};


/** @param {?proto.URedirect|undefined} value */
proto.UUserRequest.prototype.setRedirectcommand = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.UUserRequest.prototype.clearRedirectcommand = function() {
  this.setRedirectcommand(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UUserRequest.prototype.hasRedirectcommand = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UUserResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UUserResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UUserResponse.displayName = 'proto.UUserResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UUserResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.UUserResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UUserResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UUserResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    queryresult: (f = msg.getQueryresult()) && proto.UQueryResult.toObject(includeInstance, f),
    redirectresult: (f = msg.getRedirectresult()) && proto.URedirectResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UUserResponse}
 */
proto.UUserResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UUserResponse;
  return proto.UUserResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UUserResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UUserResponse}
 */
proto.UUserResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.UQueryResult;
      reader.readMessage(value,proto.UQueryResult.deserializeBinaryFromReader);
      msg.setQueryresult(value);
      break;
    case 2:
      var value = new proto.URedirectResult;
      reader.readMessage(value,proto.URedirectResult.deserializeBinaryFromReader);
      msg.setRedirectresult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UUserResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UUserResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UUserResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UUserResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueryresult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.UQueryResult.serializeBinaryToWriter
    );
  }
  f = message.getRedirectresult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.URedirectResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional UQueryResult queryResult = 1;
 * @return {?proto.UQueryResult}
 */
proto.UUserResponse.prototype.getQueryresult = function() {
  return /** @type{?proto.UQueryResult} */ (
    jspb.Message.getWrapperField(this, proto.UQueryResult, 1));
};


/** @param {?proto.UQueryResult|undefined} value */
proto.UUserResponse.prototype.setQueryresult = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.UUserResponse.prototype.clearQueryresult = function() {
  this.setQueryresult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UUserResponse.prototype.hasQueryresult = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional URedirectResult redirectResult = 2;
 * @return {?proto.URedirectResult}
 */
proto.UUserResponse.prototype.getRedirectresult = function() {
  return /** @type{?proto.URedirectResult} */ (
    jspb.Message.getWrapperField(this, proto.URedirectResult, 2));
};


/** @param {?proto.URedirectResult|undefined} value */
proto.UUserResponse.prototype.setRedirectresult = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.UUserResponse.prototype.clearRedirectresult = function() {
  this.setRedirectresult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UUserResponse.prototype.hasRedirectresult = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto);
